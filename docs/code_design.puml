@startuml

abstract class Game {
    LibGDX class.
}

class Main extends Game {
    SpriteBatch spritebatch
    ViewPort viewport
    -- Overrides --
    void create()
    void render()
    void dispose()
    -- Screens --
    mainMenuScreen
    gameScreen
}

class MainMenuScreen implements Screen
Main::mainMenuScreen --> MainMenuScreen: First screen
MainMenuScreen -> GameScreen: Switches screen
MainMenuScreen <- GameScreen: Switches screen back

class GameScreen implements Screen {
    -- Overrides --
    void show()
    void hide()
    void render()
    void resize()
    void pause()
    void resume()
    void dispose()
    --
    constructor()
    void input()
    void logic()
    void draw()
    -- Fields --
    final Main main
    gameState
    ConcurrentList<Entity> entities;
}

newpage

together {
    usecase header as "
    **General Entity Component System**
    "

    abstract class Entity {
        E.g. Frog, Hedgehog, Bullets, Fireballs etc.
        -- Components --
        HashMap<Class, Component> components;
        -- Fields --
        boolean doesExist;
    }
    abstract class Component {
        Entity entity;
        getEntity()
    }
}

class Renderer {
    SpriteBatch batch;
}
class HealthComponent extends Component {
    health;
}
class TransformComponent extends Component {
    position;
    speed;
    getSpeed()
    getPosition()
    getAdvancedPosition(timeOffset)
    setPosition()
}
note right of TransformComponent::speed
    Frogs have speed of 0.
end note
note right of TransformComponent::getAdvancedPosition
    Uses speed and timeOffset to calculate
    new position. It is useful to predict new
    position in render thread for smooth movement.
end note
class BoxComponent extends Component {
    width;
    height;
}

class Sprite {
    TextureRegion textureRegion;
}
abstract class RenderComponent extends Component {
    virtual void render(Renderer)
}
RenderComponent::render --> Renderer
note right of RenderComponent
    Rendering is handled in rendering
    thread with high frequency.
end note
abstract class UpdateComponent extends Component {
    virtual void update(deltaTime)
}
note right of UpdateComponent
    Updating is handled in logic
    thread with low frequency.
end note

newpage

usecase header as "
**Frog Entities**
"

abstract class Component {
    Entity entity;
    getEntity()
}
abstract class CollisionHandlerComponent extends Component {
    virtual void onCollision()
}
class KnightFrogCollisionHandlerComponent extends CollisionHandlerComponent {
}
class BardFrogCollisionHandlerComponent extends CollisionHandlerComponent {
}
class WizardFrogCollisionHandlerComponent extends CollisionHandlerComponent {
}
class TankyFrogCollisionHandlerComponent extends CollisionHandlerComponent {
}

class FrogStateComponent extends Component {
    volatile FrogState generalState;
    volatile boolean isAttacked;
}
enum FrogState {
    IDLE,
    ACTION,
    SHIELD,
    DYING
}
FrogStateComponent::generalState --> FrogState

class Sprite {
    TextureRegion textureRegion;
}
abstract class RenderComponent extends Component {
    virtual void render(Renderer)
}
RenderComponent::render --> Renderer
class FrogRenderComponent extends RenderComponent {
    constructor(Sprite)
    --
    Sprite sprite;
    --
    Queries state to decide which
    animation to render.
}
FrogRenderComponent --> FrogStateComponent
FrogRenderComponent::sprite -> Sprite

abstract class UpdateComponent extends Component {
    virtual void update()
}
class KnightFrogUpdateComponent extends UpdateComponent {
}
class BardFrogUpdateComponent extends UpdateComponent {
}
class WizardFrogUpdateComponent extends UpdateComponent {
}
class TankyFrogUpdateComponent extends UpdateComponent {
}

class FrogFactory {
    Creates Frog Entity and necessary Components.
    --
    Entity createKnightFrog()
    Entity createBardFrog()
    Entity createWizardFrog()
    Entity createTankyFrog()
}

newpage

usecase header as "
**Hedgehog Entities**
"

abstract class Component {
    Entity entity;
    getEntity()
}
abstract class CollisionHandlerComponent extends Component {
    virtual void onCollision()
}
class HedgehogCollisionHandlerComponent extends CollisionHandlerComponent {
}

class HedgehogStateComponent extends Component {
    volatile HedgehogState generalState;
    volatile boolean isAttacked;
    final Color color;
    damage;
}
enum HedgehogState {
    IDLE,
    ACTION,
    SHIELD,
    DYING
}
HedgehogStateComponent::generalState --> HedgehogState

class Sprite {
    TextureRegion textureRegion;
}
abstract class RenderComponent extends Component {
    virtual void render(Renderer)
}
RenderComponent::render --> Renderer
class HedgehogRenderComponent extends RenderComponent {
    constructor(Sprite)
    --
    Sprite sprite;
    --
    Queries state to decide which
    animation to render.
}
HedgehogRenderComponent --> HedgehogStateComponent
HedgehogRenderComponent::sprite -> Sprite

abstract class UpdateComponent extends Component {
    virtual void update()
}
class HedgehogUpdateComponent extends UpdateComponent {
}

class HedgehogFactory {
    Creates Hedgehog Entity and necessary Components.
    --
    Picks the following (possibly randomizes):
        * Color for newly created Hedgehog.
        * Picks damage.
        * Picks speed.
    --
    Entity createHedgehog()
}

@enduml
